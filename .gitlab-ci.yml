image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7-alpine

services:
  - ${ARTIFACTORY_SERVER}/dockerhub-remote/docker:dind

stages:
  - linters
  - smoke-tests
  - release_test_prep
  - sprinkle-tests
  - droplets
  - release
variables:
  GIT_SUBMODULE_STRATEGY: recursive


# lint python and yaml files with linters
run_gdm_linters:
  stage: linters
  tags:
    - docker-executor
  except:
    refs:
      - schedules
      - triggers
      - pipelines
  script:
    - apk add --no-cache build-base
    - apk add --no-cache bash
    - make gdm_lint
# validate README file(s) only contain links that respond with 200 OK
run_link_checker:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/node:10
  stage: smoke-tests
  tags:
    - docker-executor
  only:
    refs:
      # the current intent is to run only on main and release branches
      - main
      - /^R.*/
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  script:
    - make link_check
# validate parameters match style guide
verify_parameters_match_style_guide:
  stage: smoke-tests
  tags:
    - docker-executor
  except:
    refs:
      - schedules
      - triggers
      - pipelines
  script:
    - apk add --no-cache build-base
    - apk add --no-cache bash
    - make run_compare_parameters
    - make run_expected_diff
  artifacts:
      paths:
          - cloud-tools/parameter-parser/parameters_diff.yaml
          - cloud-tools/parameter-parser/parameters_config.yaml
      when: always
      expire_in: 1 week

# validate outputs match style guide
verify_outputs_match_style_guide:
  stage: smoke-tests
  tags:
    - docker-executor
  except:
    refs:
      - schedules
      - triggers
      - pipelines
  script:
    - apk add --no-cache build-base
    - apk add --no-cache bash
    - make run_compare_outputs
    - make run_expected_outputs_diff
  artifacts:
    paths:
      - cloud-tools/parameter-parser/outputs_diff.yaml
      - cloud-tools/parameter-parser/outputs_config.yaml
    when: always
    expire_in: 1 week

# GDM Template Modules Tests

# This job passes in the test plan to the sprinkler.py script that parses the plan and triggers the dewdrop_test_run
# This job is to be scheduled once the plan has been solidified
# Environment variables:
#   TEST_POLICY: path to test plan, this gets set under the scheduling in gitlab
#   STACK_TYPE: index for elastic search logging, this is set under the scheduling in gitlab
#   DAILY_TEST_TOKEN: token used to trigger git pipeline from the sprinkler script
#   CI_COMMIT_REF_NAME: branch name


# Module: GDM Network Template
gdm_network_module_test_job:
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-google-gdm-templates-v2/examples/modules/network/*
      - automated-test-scripts/f5-google-gdm-templates-v2/examples/modules/network/*
      - examples/modules/network/network.py
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-google-gdm-templates-v2/examples/modules/network/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Module: GDM Application Template
gdm_application_module_test_job:
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-google-gdm-templates-v2/examples/modules/application/*
      - automated-test-scripts/f5-google-gdm-templates-v2/examples/modules/application/*
      - examples/modules/application/application.py
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-google-gdm-templates-v2/examples/modules/application/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Module: GDM Bastion Template
gdm_bastion_module_test_job:
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-google-gdm-templates-v2/examples/modules/bastion/*
      - automated-test-scripts/f5-google-gdm-templates-v2/examples/modules/bastion/*
      - examples/modules/bastion/bastion.py
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-google-gdm-templates-v2/examples/modules/bastion/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Module: GDM BIGIP Autoscale Template
gdm_bigip_autoscale_module_test_job:
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-google-gdm-templates-v2/examples/modules/bigip-autoscale/*
      - automated-test-scripts/f5-google-gdm-templates-v2/examples/modules/bigip-autoscale/*
      - examples/modules/bigip-autoscale/bigip_autoscale.py
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-google-gdm-templates-v2/examples/modules/bigip-autoscale/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Module: GDM BIGIP standalone Template
gdm_bigip_standalone_module_test_job:
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-google-gdm-templates-v2/examples/modules/bigip-standalone/*
      - automated-test-scripts/f5-google-gdm-templates-v2/examples/modules/bigip-standalone/*
      - examples/modules/bigip-standalone/bigip_standalone.py
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-google-gdm-templates-v2/examples/modules/bigip-standalone/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Module: GDM DAG Template
gdm_dag_module_test_job:
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-google-gdm-templates-v2/examples/modules/dag/*
      - automated-test-scripts/f5-google-gdm-templates-v2/examples/modules/dag/*
      - examples/modules/dag/dag.py
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-google-gdm-templates-v2/examples/modules/dag/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Module: GDM Autoscale PAYG Template
gdm_autoscale_payg_test_job:
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-google-gdm-templates-v2/examples/autoscale/payg/*
      - automated-test-scripts/f5-google-gdm-templates-v2/examples/autoscale/payg/*
      - examples/autoscale/payg/autoscale.py
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-google-gdm-templates-v2/examples/autoscale/payg/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Module: GDM Quickstart Template
gdm_quickstart_test_job:
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-google-gdm-templates-v2/examples/quickstart/*
      - automated-test-scripts/f5-google-gdm-templates-v2/examples/quickstart/*
      - examples/quickstart/quickstart.py
      - examples/quickstart/bigip-configurations/*
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-google-gdm-templates-v2/examples/quickstart/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

pre_release_test_job:
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - main
  except:
    variables:
      - $ANALYTICS_MESSAGE_PROCESS == "true"
      - $ANALYTICS_SCRIPTS_PROCESS == "true"
      - $VERIFY_REGKEY_COUNT == "true"
      - $REAPER_RUN == "true"
      - $DAILY_TESTS_MONITOR == "true"
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
    refs:
      - schedules
      - triggers
      - pipelines
  variables:
    TEST_POLICY: automated-test-scripts/data/test_policies/pre_release_test.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
# end of GDM Template Modules Tests

post_release_test_job:
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    - schedules
  except:
    variables:
      - $ANALYTICS_MESSAGE_PROCESS == "true"
      - $ANALYTICS_SCRIPTS_PROCESS == "true"
      - $VERIFY_REGKEY_COUNT == "true"
      - $REAPER_RUN == "true"
      - $DAILY_TESTS_MONITOR == "true"
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: cloud-tools/automated-test-scripts/data/test_policies/post_release_test.yaml
    STACK_TYPE: dewdrop-preproduction
  # Added a manual trigger for now so that this job doesn't get triggered after every commit
  when: manual
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

scheduled_test_job:
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    - schedules
  except:
    variables:
      - $ANALYTICS_MESSAGE_PROCESS == "true"
      - $ANALYTICS_SCRIPTS_PROCESS == "true"
      - $VERIFY_REGKEY_COUNT == "true"
      - $REAPER_RUN == "true"
      - $DAILY_TESTS_MONITOR == "true"
  variables:
    TEST_POLICY: set in schedule!
    STACK_TYPE: dewdrop-production
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# This job gets triggered by the sprinkler.py script that get ran by the 'master_test_job' it ingests TEMPLATE_URL
# and TEMPLATE_PARAMETERS which are passed down by the sprinkler.py script. Using the variables runs dewdrop with
# the set environment variables
dewdrop_test_run:
  image: ${ARTIFACTORY_SERVER}/ecosystems-cloudsolutions-docker-dev/dewdrop:$DEWDROP_IMAGE_ID
  stage: droplets
  tags:
    - docker-executor
  variables:
    SSH_KEY: "$SSH_KEY"
    GOOGLE_PROJECT_ID: "$GOOGLE_PROJECT_ID"
    GOOGLE_PRIVATE_KEY_ID: "$GOOGLE_PRIVATE_KEY_ID"
    GOOGLE_CLIENT_EMAIL: "$GOOGLE_CLIENT_EMAIL"
    GOOGLE_CLIENT_ID: "$GOOGLE_CLIENT_ID"
    GOOGLE_PRIVATE_KEY: "$GOOGLE_PRIVATE_KEY"
    TEMPLATE_URL: "$TEMPLATE_URL"
    TEMPLATE_PARAMETERS: "$TEMPLATE_PARAMETERS"
    STACK_TYPE: "$STACK_TYPE"
    GITLAB_JOB_URL: "$CI_JOB_URL"
  only:
    variables:
      - $RUN_SCHEDULED_DEWDROP_TEST == "true"
  script:
    # the dewdrop image itself does not contain any test files, so ensure dewdrop
    # is run from the known location where test policies expect it to be
    # location: root of the cloud factory repository
    - if [ "$CLOUD_PROVIDER_ENVIRONMENT" == "aws_china" ]; then
    -   AWS_DEFAULT_REGION=$AWS_CHINA_DEFAULT_REGION
    -   AWS_ACCESS_KEY_ID=$AWS_CHINA_ACCESS_KEY_ID
    -   AWS_SECRET_ACCESS_KEY=$AWS_CHINA_SECRET_ACCESS_KEY
    - fi
    - python /dewdrop/dewdrop-docker.py

publish_to_github:
  stage: release
  only:
    - /(^publish-(\d+\.){1,2}(\d)-(\d+)?$)/
  script:
    - apk add --no-cache jq
    # Execute Release script to push source to github repo
    - ./cloud-tools/release-tool/publish_github.sh "$ALLOWED_DIRS" "$ALLOWED_FILES"
  variables:
    ALLOWED_DIRS: "examples .github"
    ALLOWED_FILES: ".gitignore .gitattributes README.md"
    GITLAB_API_URL: "$GOOGLE_V2_URL"
    GIT_HUB_API_TOKEN: "$GOOGLE_V2_GITHUB_API_TOKEN"
    GITLAB_PRIVATE_TOKEN: "$GOOGLE_V2_GITLAB_API_TOKEN"

